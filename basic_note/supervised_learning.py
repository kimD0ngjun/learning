# https://wikidocs.net/217242
"""
지도 학습의 훈련 데이터는 정답이 무엇인지 맞춰 하는 '문제'에 해당되는 데이터와 레이블이라고 부르는 '정답'이 적혀있는 데이터로 구성

기계를 지도하는 선생님의 입장이 되어보겠습니다.
기계를 훈련시키기 위해서 데이터를 총 4개로 나눕니다.
우선 메일의 내용이 담긴 첫번째 열을 X에 저장합니다. 그리고 메일이 스팸인지 정상인지 정답이 적혀있는 두번째 열을 y에 저장합니다.
이제 문제지에 해당되는 20,000개의 X와 정답지에 해당되는 20,000개의 y가 생겼습니다.

그리고 이제 이 X와 y에 대해서 일부 데이터를 또 다시 분리합니다.
이는 문제지를 다 공부하고나서 실력을 평가하기 위해서 시험(test)용으로 일부로 일부 문제와 해당 문제의 정답지를 분리해놓는 것입니다.
여기서는 2,000개를 분리한다고 가정하겠습니다. 이때 분리 시에는 여전히 X와 y의 맵핑 관계를 유지해야 합니다.
어떤 X(문제)에 대한 어떤 y(정답)인지 바로 찾을 수 있어야 합니다.
이렇게 되면 학습용에 해당되는 18,000개의 X, y의 쌍과 시험용에 해당되는 2000개의 X, y의 쌍이 생깁니다
이 책에서는 이 유형의 데이터들에게 일반적으로 다음과 같은 변수명을 부여합니다.

<훈련 데이터>
X_train : 문제지 데이터
y_train : 문제지에 대한 정답 데이터.

<테스트 데이터>
X_test : 시험지 데이터.
y_test : 시험지에 대한 정답 데이터.

기계는 이제부터 X_train과 y_train에 대해서 학습을 합니다.
기계는 학습 상태에서는 정답지인 y_train을 볼 수 있기 때문에 18,000개의 문제지 X_train과 y_train을 함께 보면서
어떤 메일 내용일 때 정상 메일인지 스팸 메일인지를 열심히 규칙을 도출해나가면서 정리해나갑니다.
그리고 학습을 다 한 기계에게 y_test는 보여주지 않고, X_test에 대해서 정답을 예측하게 합니다.
그리고 기계가 예측한 답과 실제 정답인 y_test를 비교하면서 기계가 정답을 얼마나 맞췄는지를 평가합니다.
이 수치가 기계의 정확도(Accuracy)가 됩니다.
"""
import pandas as pd
import numpy as np


"""
걍 일단, 문제와 정답으로 분류
그리고 문제 중에서도 학습용과 테스트용으로 분류
"""
# zip() 첫번째로 등장한 애들끼리 묶이고, 두번째로 등장한 애들끼리 묶임
X, y = zip(['a', 1], ['b', 2], ['c', 3])
print('X 데이터 :',X)
print('y 데이터 :',y)

# 리스트의 리스트 또는 행렬 또는 뒤에서 배울 개념인 2D 텐서.
sequences = [['a', 1], ['b', 2], ['c', 3]]
X, y = zip(*sequences)
print('X 데이터 :',X)
print('y 데이터 :',y)

# 구조가 딱 데이터프레임임
values = [['당신에게 드리는 마지막 혜택!', 1],
['내일 뵐 수 있을지 확인 부탁드...', 0],
['도연씨. 잘 지내시죠? 오랜만입...', 0],
['(광고) AI로 주가를 예측할 수 있다!', 1]]
columns = ['메일 본문', '스팸 메일 유무']

df = pd.DataFrame(values, columns=columns)
print(df)

# 열의 이름으로 데이터프레임 접근
X = df['메일 본문']
y = df['스팸 메일 유무']

print(X.tolist())
print(y.tolist())

"""
numpy 사용해서 분리하기
"""
np_array = np.arange(0,16).reshape((4,4))
print('전체 데이터 :')
print(np_array)

# 마지막 열을 제외하고 X데이터에 저장
# 마지막 열만을 y데이터에 저장
X = np_array[:, :3]
y = np_array[:,3]

print('X 데이터 :')
print(X)
print('y 데이터 :',y)